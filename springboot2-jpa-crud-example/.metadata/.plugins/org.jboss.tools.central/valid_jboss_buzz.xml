<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>One size fits all JGroups?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9Iq1AWQD1U0/one-size-fits-all-jgroups.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><category term="multiple discovery protocols" scheme="searchisko:content:tags" /><category term="one-size-fits-all jgroups" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-one_size_fits_all_jgroups</id><updated>2020-09-04T08:17:31Z</updated><published>2020-09-04T08:17:00Z</published><content type="html">&lt;p&gt;We're getting one step closer to having just a single JGroups program that runs in any environment! There are 3 things that need to be made to make this possible:&lt;/p&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Multiple discovery protocols: this allows for multiple discovery protocols to be present in the same configuration. For example, DNS_PING or KUBE_PING to run in Kubernetes environments, MPING when IP multicasting is available, TCPPING for a static list of members etc. DONE: [1]&lt;/li&gt;&lt;li&gt;Multiple transports: this can run a UDP and TCP transport side by side. If IP multicasting is not available, we can fall back to TCP. Or, even if multicasting is available, use TCP for one-to-one messages and UDP for one-to-all messages. NOT DONE yet: [2]&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Use GraalVM to compile this down to a native executable. This could be shipped in a Docker image, so it could be run anywhere Docker/Kubernetes is available. NOT DONE yet.&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Step #3 is optional, but would help for quick startup times.&lt;/p&gt;&lt;p&gt;Step #2 is not really needed if we know that all environments run in a cloud where IP multicasting is not supported, so we can ship configs with TCP as transport. But if we know that some customers deploy locally, where IP multicasting is available, and others in environments where multicasting is disabled, or in clouds, then multiple transports will be helpful, as we can ship and support a single configuration.&lt;/p&gt;&lt;p&gt;Step #1 is probably the most important one: there are ~13-15 discovery protocols available today, reflecting the wide range of different environments. Being able to ship a config that includes multiple discovery protocols allows us to support a single configuration for many different customers.&lt;/p&gt;&lt;p&gt;In the future, we could think of code that looks at unused/inactive discovery protocols, or even transports, and removes them after some time. Kind of like just-in-time (JIT) optimizations in the JVM...&lt;/p&gt;&lt;p&gt;Feature [1] will be in 5.1. If you want to try this out today, head over to Github [3], clone the JGroups repo and generate your own JAR.&lt;/p&gt;&lt;p&gt;Cheers,&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;[1] &lt;a href="https://issues.redhat.com/browse/JGRP-2230"&gt;https://issues.redhat.com/browse/JGRP-2230&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[2] &lt;a href="https://issues.redhat.com/browse/JGRP-1424"&gt;https://issues.redhat.com/browse/JGRP-1424&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[3] &lt;a href="https://github.com/belaban/JGroups"&gt;https://github.com/belaban/JGroups&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9Iq1AWQD1U0" height="1" width="1" alt=""/&gt;</content><summary>We're getting one step closer to having just a single JGroups program that runs in any environment! There are 3 things that need to be made to make this possible: Multiple discovery protocols: this allows for multiple discovery protocols to be present in the same configuration. For example, DNS_PING or KUBE_PING to run in Kubernetes environments, MPING when IP multicasting is available, TCPPING fo...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2020-09-04T08:17:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2020/09/one-size-fits-all-jgroups.html</feedburner:origLink></entry><entry><title>Migrate your Java VMs to containers with Red Hat Migration Toolkit for Applications 5.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/pAIKPkCARVc/" /><category term="Java" /><category term="Linux" /><category term="Modern App Dev" /><category term="Universal Base Images (UBI)" /><category term="application migration" /><category term="codeready" /><category term="containers Java" /><category term="OpenJDK" /><category term="openshift" /><author><name>miguel</name></author><id>https://developers.redhat.com/blog/?p=768337</id><updated>2020-09-04T07:00:19Z</updated><published>2020-09-04T07:00:19Z</published><content type="html">&lt;p&gt;As a developer, you have probably experimented with &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. It&amp;#8217;s also possible that you are already running several &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java applications&lt;/a&gt; on a Kubernetes platform, maybe &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. These initial &lt;a href="https://developers.redhat.com/topics/containers"&gt;containerized&lt;/a&gt; applications were greenfield projects, where you enjoyed the benefits of a platform providing templated deployments, easy rollbacks, resource availability, security by default, and a manageable way to publish your services.&lt;/p&gt; &lt;p&gt;Now, you might be thinking, &amp;#8220;How can I enjoy all of these benefits in my existing Java applications?&amp;#8221; Most Java applications in production today are running on virtual machines (VMs), likely on an application platform that is not container friendly. So, how can you migrate them from the current platform to containers on Kubernetes?&lt;/p&gt; &lt;p&gt;It isn&amp;#8217;t an easy task, but this is a problem that we have been working hard on for years. &lt;a href="https://developers.redhat.com/products/mta"&gt;Red Hat Migration Toolkit for Applications&lt;/a&gt; (MTA) 5.0 is the latest resulting iteration: An assembly of tools that you can use to analyze existing applications and discover what is required to modernize them. Read on to learn MTA 5.0&amp;#8217;s features and migration paths.&lt;/p&gt; &lt;p&gt;&lt;span id="more-768337"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Modernize your application portfolio&lt;/h2&gt; &lt;p&gt;Red Hat engineers, architects, and consultants have spent years capturing the lessons learned from re-platforming a large set of applications. We translated what we learned from these Java migration challenges into migration rules, and then developed a toolkit (starting with &lt;a target="_blank" rel="nofollow" href="https://github.com/windup/"&gt;an open source project called Windup&lt;/a&gt;, which we later released as Red Hat Application Migration Toolkit) to help automate the process of analyzing application migrations and making them repeatable. With that toolkit, you can discover issues before you even begin a migration.&lt;/p&gt; &lt;p&gt;Now, we&amp;#8217;ve entered a new stage in the evolution of enterprise application migration. We&amp;#8217;re focusing on containerized workloads while keeping all of the valuable lessons we&amp;#8217;ve learned so far. &lt;a href="https://developers.redhat.com/products/mta"&gt;Red Hat Migration Toolkit for Applications&lt;/a&gt; (MTA) 5.0 is the next iteration: An assembly of tools that you can use to analyze existing applications and discover what is required to modernize them.&lt;/p&gt; &lt;p&gt;Potential MTA migration paths include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Modernize Oracle WebLogic running on Oracle JDK on Windows: Migrate these applications to &lt;a href="https://developers.redhat.com/videos/vimeo/95462201"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (EAP) and run them on &lt;a href="https://developers.redhat.com/products/openjdk/download"&gt;OpenJDK&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux (RHEL)&lt;/a&gt;â€”all in virtual machines.&lt;/li&gt; &lt;li&gt;Make Tomcat supportable on Oracle JDK on Ubuntu: Move your application to &lt;a href="https://developers.redhat.com/products/webserver/overview"&gt;Red Hat JBoss Web Server&lt;/a&gt; (Red Hat&amp;#8217;s build of Tomcat) on RHEL &lt;a href="https://developers.redhat.com/videos/youtube/VG7Y1mjVIE0"&gt;Universal Base Image&lt;/a&gt; (UBI) and OpenJDK running in containers on OpenShift.&lt;/li&gt; &lt;li&gt;Migrate your JBoss EAP on OpenJDK and Windows stack to JBoss EAP on OpenJDK and RHEL UBI running in containers on OpenShift.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Migration Toolkit for Applications 5.0&lt;/h2&gt; &lt;p&gt;Migration Toolkit for Applications 5.0 is now generally available to every developer who needs an easier way to modernize and migrate Java applications. MTA is free of charge, and there are five different ways to use it:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;WebUI&lt;/strong&gt;: A user interface that you can run in a laptop or deploy on OpenShift 3.11 or 4.x.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Command-line interface (CLI)&lt;/strong&gt;: Most useful for analyzing massive amounts of applications, as well as embedding MTA into current CI/CD pipelines.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;IDE plug-ins&lt;/strong&gt;: &lt;ul&gt; &lt;li&gt;Use Eclipse desktop IDEs, &lt;a href="https://developers.redhat.com/products/codeready-studio/overview"&gt;CodeReady Studio&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.mta-vscode-extension"&gt;Visual Studio Code (VS Code) (tech preview)&lt;/a&gt; for local development.&lt;/li&gt; &lt;li&gt;Use Eclipse Che and &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;CodeReady Workspaces&lt;/a&gt; for centralized, in-browser development.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Maven plug-in&lt;/strong&gt;: Use the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/migration_toolkit_for_applications/5.0/html-single/maven_plugin_guide/index"&gt;Maven plug-in&lt;/a&gt; to analyze applications during build time.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Figure 1 shows the MTA 5.0 console with supported applications labeled.&lt;/p&gt; &lt;div id="attachment_769907" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a0f6e2588.png"&gt;&lt;img aria-describedby="caption-attachment-769907" class="wp-image-769907 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a0f6e2588-1024x680.png" alt="The MTA console's application list" width="640" height="425" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a0f6e2588-1024x680.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a0f6e2588-300x199.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a0f6e2588-768x510.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a0f6e2588.png 1306w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769907" class="wp-caption-text"&gt;Figure 1: The MTA 5.0 console showing supported applications.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: For more information about how developers and architects use the various components, see &lt;a href="https://developers.redhat.com/products/mta/download"&gt;the MTA 5.0 product page&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Many migration paths&lt;/h2&gt; &lt;p&gt;Migration Toolkit for Applications 5.0 supports a broad set of transformation paths, with rules for the following cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Apache Camel 2 to Camel 3&lt;/b&gt;: MTA 5.0 contains new rules to help developers updating their applications use the latest version of Apache Camel 3, with 13 rulesets and 147 rules. Figure 2 shows a rule specific to the Camel 2 to Camel 3 migration. (Special thanks to Matej Melko and John Poth for their contributions to these rules.)&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_768407" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea15f3080a.png"&gt;&lt;img aria-describedby="caption-attachment-768407" class="wp-image-768407 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea15f3080a-1024x173.png" alt="Issue Detail: The 'org.apache.camel:camel-kafka' component has removed the options 'bridgeEndpoint' and 'circularEndPoint Detection'" width="640" height="108" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea15f3080a-1024x173.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea15f3080a-300x51.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea15f3080a-768x129.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea15f3080a.png 1104w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-768407" class="wp-caption-text"&gt;Figure 2: A rule specific to the Camel 2 to Camel 3 migration.&lt;/p&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Spring Boot to Quarkus&lt;/b&gt;: We&amp;#8217;ve seeded three new rules for migrating from &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt; to &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;. For the upcoming MTAÂ 5.1 version, we plan to add a set of 28 rules. Fourteen rules have already been built, two are in progress, and 12 are in the pipeline. Figure 3 shows a rule for replacing the Spring Shell dependency with the appropriate Quarkus PicoCli interfaces.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_768397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea14373426.png"&gt;&lt;img aria-describedby="caption-attachment-768397" class="wp-image-768397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea14373426-1024x206.png" alt="Issue Detail: Replace the SpringBoot Shell artifact with QuarkusÂ 'picocli' extension" width="640" height="129" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea14373426-1024x206.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea14373426-300x60.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea14373426-768x155.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea14373426.png 1111w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-768397" class="wp-caption-text"&gt;Figure 3: A Spring Boot-to-Quarkus migration rule.&lt;/p&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;JBoss EAP&lt;/b&gt;: We have added a comprehensive set of rules to ensure that migrated applications comply with Java/Jakarta Enterprise Edition (JEE) standards, which is a requirement for working on JBoss EAP.Â As shown in Figure 4, an issue is raised when using the WebLogic-specific logger, which provides advice for using the standard Java logger.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_769957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a548490ed.png"&gt;&lt;img aria-describedby="caption-attachment-769957" class="wp-image-769957" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a548490ed.png" alt="Issue Detail: WebLogic proprietary logger (NonCatalogLogger)" width="640" height="195" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a548490ed.png 816w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a548490ed-300x91.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a548490ed-768x233.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769957" class="wp-caption-text"&gt;Figure 4: Choose the correct logger for your migration.&lt;/p&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Containers&lt;/b&gt;: We have added rules that are based on the &lt;a target="_blank" rel="nofollow" href="https://12factor.net/"&gt;Twelve- Factor App methodology&lt;/a&gt; for containerizing applications. Figure 5 shows a rule against using Java RMI.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_769967" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a56a46333.png"&gt;&lt;img aria-describedby="caption-attachment-769967" class="wp-image-769967 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a56a46333-1024x107.png" alt="Issue Detail: Java Remote Method Invocation (RMI) API" width="640" height="67" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a56a46333-1024x107.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a56a46333-300x31.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a56a46333-768x80.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f43a56a46333.png 1102w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769967" class="wp-caption-text"&gt;Figure 5: Java RMI should be avoided in cloud environments.&lt;/p&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Linux&lt;/b&gt;: We&amp;#8217;ve added rules to help you avoid issues specific to using Java on Windows. One such rule, shown in Figure 6, calls for replacing a Windows filesystem path with a Linux-style path.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_768457" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314.png"&gt;&lt;img aria-describedby="caption-attachment-768457" class="wp-image-768457" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314.png" alt="Issue Detail: Java 2D library usage" width="640" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314.png 700w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314-300x69.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-768457" class="wp-caption-text"&gt;Figure 7: Consider replacing Java 2D with the OpenJDK Java 2D library.&lt;/p&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;OpenJDK&lt;/b&gt;: This rule helps you avoid problems coming from using specific proprietary libraries that are not in the JDK, such as the Java 2D library (shown in Figure 7).&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_768457" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314.png"&gt;&lt;img aria-describedby="caption-attachment-768457" class="wp-image-768457" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314.png" alt="Issue Detail: Java 2D library usage" width="640" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314.png 700w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/img_5f3ea2d09e314-300x69.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-768457" class="wp-caption-text"&gt;Figure 7: Consider replacing Java 2D with the OpenJDK Java 2D library.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: See the &lt;a href="https://developers.redhat.com/products/mta/use-cases"&gt;complete matrix of transformations and combinations&lt;/a&gt; that are made easier by MTA 5.0.&lt;/p&gt; &lt;h2&gt;Get started with MTA 5.0&lt;/h2&gt; &lt;p&gt;Go here to &lt;a href="https://developers.redhat.com/products/mta"&gt;download Migration Toolkit for Applications&lt;/a&gt;. The &lt;a href="https://developers.redhat.com/products/mta/getting-started"&gt;Getting started guide&lt;/a&gt; gets you up and running with MTA 5.0 in five minutes.&lt;/p&gt; &lt;p&gt;If you want to learn more about the real-world experience of using MTA to modernize and migrate your Java applications, check out this video:Â &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=t3VkRpFlkn0"&gt;How architects and developers use MTA&lt;/a&gt;. For a more in-depth introduction, see the &lt;a target="_blank" rel="nofollow" href="https://youtu.be/mRCz6Jl0Ds8"&gt;Migration Toolkit for Applications video demo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You might also want to take a look at the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/migration_toolkit_for_applications/"&gt;MTA 5.0 documentation&lt;/a&gt; to find out how to make the most of MTA. As an example, you can use the documentation to learn how to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/migration_toolkit_for_applications/5.0/html/rules_development_guide/index"&gt;write your own migration rules&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Follow us &lt;a target="_blank" rel="nofollow" href="https://twitter.com/MTAbyRedHat"&gt;@MTAbyRedHat&lt;/a&gt; to stay up to date and engage directly with our team. We are looking forward to seeing your apps at the next level!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#38;linkname=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#38;linkname=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#38;linkname=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#38;linkname=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#38;linkname=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#38;linkname=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#38;linkname=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F04%2Fmigrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0%2F&amp;#038;title=Migrate%20your%20Java%20VMs%20to%20containers%20with%20Red%20Hat%20Migration%20Toolkit%20for%20Applications%205.0" data-a2a-url="https://developers.redhat.com/blog/2020/09/04/migrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0/" data-a2a-title="Migrate your Java VMs to containers with Red Hat Migration Toolkit for Applications 5.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/04/migrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0/"&gt;Migrate your Java VMs to containers with Red Hat Migration Toolkit for Applications 5.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/pAIKPkCARVc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;As a developer, you have probably experimented with Kubernetes. It&amp;#8217;s also possible that you are already running several Java applications on a Kubernetes platform, maybe Red Hat OpenShift. These initial containerized applications were greenfield projects, where you enjoyed the benefits of a platform providing templated deployments, easy rollbacks, resource availability, security by default, and a [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/04/migrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0/"&gt;Migrate your Java VMs to containers with Red Hat Migration Toolkit for Applications 5.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/09/04/migrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">768337</post-id><dc:creator>miguel</dc:creator><dc:date>2020-09-04T07:00:19Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/09/04/migrate-your-java-vms-to-containers-with-red-hat-migration-toolkit-for-applications-5-0/</feedburner:origLink></entry><entry><title>New Account Console</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kh-seJxqpgA/new-account-console.adoc.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><author><name>Stan Silvert</name></author><id>searchisko:content:id:jbossorg_blog-new_account_console</id><updated>2020-09-04T00:00:00Z</updated><published>2020-09-04T00:00:00Z</published><content type="html">&lt;div class="paragraph"&gt; &lt;p&gt;The Keycloak team is excited that our new Account Console is finally final! The old account console is still available for those who need it, but the new version is the default from now on.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This new console is written as a Single Page Application with &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and &lt;a href="https://www.patternfly.org/v4/"&gt;PatternFly 4&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In addition to the modern look and feel, we make it really easy for organizations to personalize the console with custom themes and even custom pages that can have unlimited functionality.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_screen_shots_of_new_account_management_console"&gt;Screen shots of New Account Management Console&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;span class="image"&gt;&lt;img src="https://www.keycloak.org//resources/images/blog/new-account-console/welcome-screen.png" alt="alt"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;span class="image"&gt;&lt;img src="https://www.keycloak.org//resources/images/blog/new-account-console/main-screen.png" alt="alt"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;span class="image"&gt;&lt;img src="https://www.keycloak.org//resources/images/blog/new-account-console/device-activity.png" alt="alt"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_theming"&gt;Theming&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;PatternFly 4 makes it really easy to theme the new account console using its system of &lt;a href="https://www.patternfly.org/v4/documentation/overview/global-css-variables"&gt;CSS variables&lt;/a&gt;. All you have to do is tweak a few variables, add your own logo, and the console is perfectly skinned.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code class="language-css" data-lang="css"&gt;body { --pf-global--FontFamily--sans-serif: Comic Sans MS; --pf-global--FontFamily--heading--sans-serif: Comic Sans MS; --pf-global--BackgroundColor--dark-100: #2B9AF3; --pf-global--Color--100: #004080; }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;span class="image"&gt;&lt;img src="https://www.keycloak.org//resources/images/blog/new-account-console/keycloak-man-welcome-screen.png" alt="alt"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_create_your_own_sub_pages"&gt;Create your own sub-pages&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You may have noticed the "Keycloak Man" section above. The new console includes one of our most requested features. That is the ability to add and remove sub-pages. So we&amp;#8217;ve made it very easy to develop and plug in your own React component and add it to the Account Console.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It&amp;#8217;s even possible to build new pages with nothing but an editor. No build step is required unless you want to use more advanced tools like JSX and Typescript.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;span class="image"&gt;&lt;img src="https://www.keycloak.org//resources/images/blog/new-account-console/who-is-keycloak-man.png" alt="alt"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;span class="image"&gt;&lt;img src="https://www.keycloak.org//resources/images/blog/new-account-console/keycloak-man-overview.png" alt="alt"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;span class="image"&gt;&lt;img src="https://www.keycloak.org//resources/images/blog/new-account-console/keycloak-man-jsx.png" alt="alt"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Of course, this "Keycloak Man" theme is available online as a Keycloak Quick Start so you can check out all the source.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_the_home_for_new_keycloak_features"&gt;The Home for New Keycloak Features&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New Account Console is the home for user configuration of new Keycloak features like &lt;a href="https://www.keycloak.org/2019/03/w3c-web-authentication-(webauthn).html"&gt;WebAuthn support&lt;/a&gt;. So look for new features to start showing up in the New Account Console instead of the old one.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kh-seJxqpgA" height="1" width="1" alt=""/&gt;</content><summary>The Keycloak team is excited that our new Account Console is finally final! The old account console is still available for those who need it, but the new version is the default from now on. This new console is written as a Single Page Application with React and PatternFly 4. In addition to the modern look and feel, we make it really easy for organizations to personalize the console with custom the...</summary><dc:creator>Stan Silvert</dc:creator><dc:date>2020-09-04T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org//2020/09/new-account-console.adoc.html</feedburner:origLink></entry><entry><title>The present and future of CI/CD with GitOps on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vPp-61Exbn4/" /><category term="CI/CD" /><category term="DevOps" /><category term="Kubernetes" /><category term="Operator" /><category term="Argo CD" /><category term="Continuous Delivery" /><category term="gitops" /><category term="Jenkins pipeline" /><category term="openshift" /><category term="Tekton" /><author><name>Siamak Sadeghianfar</name></author><id>https://developers.redhat.com/blog/?p=773487</id><updated>2020-09-03T07:00:48Z</updated><published>2020-09-03T07:00:48Z</published><content type="html">&lt;p&gt;The need to deliver applications faster is near-universal, even in organizations that traditionally are perceived as risk-averse. As the foundations of &lt;a href="https://developers.redhat.com/topics/devops"&gt;DevOps&lt;/a&gt;, continuous integration (CI) and continuous delivery (CD) are essential to application delivery in most organizations. Together, &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; tools and processes automate building and testing applications on every code or configuration change, then trigger a sequence of workflows that deliver the application to production.&lt;/p&gt; &lt;p&gt;Automation helps developers deliver quality applications faster while reducing human error, with proven results. As an example, Ford, one of the largest automakers in the United States, has accelerated their development process by adopting DevOps processes and CI/CD workflows, &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/ford-motor-company-case-study"&gt;reducing their application delivery time to minutes instead of months&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/containers"&gt;containers&lt;/a&gt; play an important role in reducing barriers to automating application delivery by providing the APIs and tools required to spin up infrastructure and deploy applications on demand. Automation on this level paved the way for many organizations to embark on a DevOps transformation, adopting not just the tools but the mindset and collaborative culture that comes with them. As the Kubernetes platform for developers, &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; was designed to support developer teams in adopting CI/CD practices and automating application delivery workflows.&lt;/p&gt; &lt;p&gt;In this article, we&amp;#8217;ll look at how OpenShift is evolving to meet the future of CI/CD by integrating cloud-native tools such as &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/learn/topics/pipelines"&gt;Tekton&lt;/a&gt;, &lt;a href="https://developers.redhat.com/devnation/tech-talks/gitops"&gt;GitOps&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt;. We&amp;#8217;ll start with an overview of the present CI/CD landscape; then, I&amp;#8217;ll introduce the technologies pointing us to the future.&lt;/p&gt; &lt;h2&gt;CI/CD on OpenShift&lt;/h2&gt; &lt;p&gt;The CI/CD landscape is constantly expanding to include a wider spectrum of tools and approaches to application delivery. Taking advantage of these tools presents an opportunity to improve your DevOps workflows. It also creates challenges due to existing investments in legacy and traditional tools. At Red Hat, we support development teams with their existing investments and workflows by ensuring that OpenShift integrates with existing toolsets. Here are just a few examples of the on-premises and cloud-based CI/CD services that are integrated with OpenShift:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://www.jenkins.io/doc/pipeline/steps/openshift-pipeline/"&gt;OpenShift Jenkins Plugin&lt;/a&gt; simplifies running actions against OpenShift from Jenkins pipelines.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2020/02/13/openshift-actions-deploy-to-red-hat-openshift-directly-from-your-github-repository/"&gt;OpenShift Action for GitHub&lt;/a&gt; enables deployment into OpenShift directly from GitHub Action workflows in your GitHub repositories.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/12/05/introduction-to-the-red-hat-openshift-deployment-extension-for-microsoft-azure-devops/"&gt;OpenShift Extension for Azure DevOps&lt;/a&gt; offers tasks to integrate into Azure pipelines and perform actions on your OpenShift clusters.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/blog/installing-the-gitlab-runner-the-openshift-way"&gt;GitLab Runner for OpenShift&lt;/a&gt; integrates OpenShift with GitLab to run GitLab jobs on your OpenShift cluster and report the results back to GitLab.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_773627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/openshift.png"&gt;&lt;img aria-describedby="caption-attachment-773627" class="wp-image-773627" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/openshift.png" alt="An illustration showing how OpenShift integrates technologies for automated builds, traditional CI/CD, and cloud-native CI/CD." width="640" height="293" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/openshift.png 657w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/openshift-300x137.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-773627" class="wp-caption-text"&gt;Figure 1: The present and future of CI/CD on OpenShift.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As described in Figure 1, we are also engaging with current innovations in the Kubernetes &lt;a href="https://developers.redhat.com/topics/open-source"&gt;open source&lt;/a&gt; CI/CD ecosystem in order to support teams focusing on &lt;a href="https://developers.redhat.com/blog/2020/08/14/introduction-to-cloud-native-ci-cd-with-tekton-kubecon-europe-2020/"&gt;cloud-native development and modern application delivery&lt;/a&gt;. Let&amp;#8217;s start with how the technologies we listed earlier for automated builds, traditional CI/CD, and cloud-native CI/CD are coming together in OpenShift today.&lt;/p&gt; &lt;h2&gt;Automated builds&lt;/h2&gt; &lt;p&gt;Development teams deliver code changes in the applications that they own to address business requirements. Building container images for the application and deploying to Kubernetes is often outside the focus of developers and disruptive to their workflows. Since the first OpenShift release, we&amp;#8217;ve addressed this challenge with the OpenShift Build service. It provides build and deployment automation that runs on the platform and turns application source code into container images, which are then deployed to OpenShift. Every change to the application source code, configuration, or runtime updates (such as in &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; or &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt;) leads to a new application image build, which is deployed thereafter. Developers who use Dockerfiles can curate exactly how they want their application container image to be built. Developers who prefer to point directly to their source code can use the Source-to-Image (S2I) strategy, which builds a container image from the application source.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: As the number of build tools in the Kubernetes ecosystem grows, OpenShift is expanding support for additional build tools such as Kaniko and Buildpacks, as well as through the next generation of the OpenShift Build capabilities base on the &lt;a target="_blank" rel="nofollow" href="https://github.com/shipwright-io"&gt;Shipwright&lt;/a&gt; open source project.&lt;/p&gt; &lt;h2&gt;Traditional CI/CD&lt;/h2&gt; &lt;p&gt;Continuous integration is a long-established practice in many organizations. Application development teams often start with Jenkins to automate building and testing their applications. Jenkins is a flexible, open source CI engine with a rich plug-in ecosystem.&lt;/p&gt; &lt;p&gt;To support this integration, OpenShift provides a Jenkins server and Jenkins agents for Node.js, Java, and &lt;a href="https://developers.redhat.com/topics/dotnet"&gt;.NET Core&lt;/a&gt; applications. Being able to easily run existing Jenkins pipelines on OpenShift lets teams take advantage of their long-term investments in the Jenkins ecosystem. Furthermore, Jenkins on OpenShift comes with a set of plug-ins that improve the Jenkins user experience on OpenShift and let you configure Jenkins servers declaratively.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: As teams adopt configuration-as-code to achieve repeatability for infrastructure deployment and configuration, we are receiving feedback from the Jenkins community and customers that it&amp;#8217;s challenging to apply these practices to configuring the Jenkins server itself. While OpenShift plug-ins help alleviate this challenge, the configuration that is available is only a subset of the available configurations.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;To address this problem and automate Jenkins&amp;#8217; operational management, we are working with the Jenkins community on a &lt;a target="_blank" rel="nofollow" href="https://github.com/jenkinsci/kubernetes-operator"&gt;Jenkins Operator&lt;/a&gt;, which is available on OpenShift as a developer preview release. The Jenkins Operator applies the Operator pattern to installing and managing Jenkins servers on Kubernetes.&lt;/p&gt; &lt;h2&gt;Cloud-native CI/CD&lt;/h2&gt; &lt;p&gt;The increase in DevOps adoption and cloud-native development has spawned a need for CI/CD technologies that are adapted to the requirements of these new architectures, processes, and application paradigms. Despite using Jenkins as an established CI engine, many teams are seeking alternatives that are native to Kubernetes and build on the same infrastructure and abstractions that their applications do.&lt;/p&gt; &lt;h3&gt;Tekton&lt;/h3&gt; &lt;p&gt;&lt;img class="alignleft wp-image-773697 size-thumbnail" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/tekton-150x150.png" alt="" width="150" height="150" /&gt;&lt;br /&gt; Tekton is an open source project and part of the Continuous Delivery Foundation, which is dedicated to creating a CI/CD framework that runs natively on Kubernetes. Tekton provides the ability to describe delivery pipelines declaratively using Kubernetes concepts and execute them on-demand in containers. OpenShift Pipelines builds on Tekton, delivering a stable and supported CI/CD experience that seamlessly integrates into OpenShift. With OpenShift Pipelines, we are sharply focused on providing the best possible user experience for Tekton pipelines.&lt;/p&gt; &lt;p&gt;Figures 2 and 3 show an example PetClinic application in OpenShift Pipelines and the OpenShift console.&lt;/p&gt; &lt;div id="attachment_773657" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-773657" class="wp-image-773657 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/pipeline-viz-1024x461.png" alt="A screenshot of PetClinic in OpenShift Pipelines." width="640" height="288" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/pipeline-viz-1024x461.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/pipeline-viz-300x135.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/pipeline-viz-768x346.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-773657" class="wp-caption-text"&gt;Figure 2: The PetClinic app in OpenShift Pipelines.&lt;/p&gt;&lt;/div&gt; &lt;div id="attachment_773537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/image5.png"&gt;&lt;img aria-describedby="caption-attachment-773537" class="wp-image-773537 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/image5-1024x635.png" alt="A screenshot of PetClinic in the OpenShift console." width="640" height="397" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/image5-1024x635.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/image5-300x186.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/image5-768x476.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/image5.png 1151w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-773537" class="wp-caption-text"&gt;Figure 3: PetClinic in the OpenShift console.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;GitOps&lt;/h3&gt; &lt;p&gt;As Kubernetes adoption has sped up and teams transition to continuous delivery, most organizations are grappling with the challenge of keeping their cluster configuration in sync and managing application delivery across hybrid, multi-cluster environments. While it&amp;#8217;s common to build on CI for delivering applications to production environments, this strategy lacks the visibility and insight required to ensure that production clusters are consistent.&lt;/p&gt; &lt;p&gt;GitOps, an approach to continuous delivery and a subset of DevOps, is a set of practices that have become increasingly popular as a way to manage the complexities of running a hybrid multi-cluster Kubernetes infrastructure. GitOps supports developers in deploying applications to multiple Kubernetes clusters while guaranteeing consistency and predictability. Using Git repositories as the source of truth, GitOps allows developers to apply Git workflows that have been used for application development to infrastructure and application operators, hence providing visibility and traceability for every change that goes into production.&lt;/p&gt; &lt;h3&gt;Argo CD&lt;/h3&gt; &lt;p&gt;&lt;img class="alignleft wp-image-773647 size-thumbnail" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/image2-1-100x150.png" alt="" width="100" height="150" /&gt;&lt;br /&gt; Argo CD is a declarative GitOps Operator that enables teams to implement GitOps patterns on Kubernetes. It automates deploying applications to multiple clusters by syncing the application configuration to the target clusters and ensuring that the clusters are in the desired state. Argo CD also monitors the state of the deployed applications on your Kubernetes clusters and increases security and reliability by constantly comparing them to the Git repositories. Argo CD is able to detect and correct any drift from the desired state (for instance, in case of manual changes). &lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-and-intuit-join-forces-argo-project-extending-gitops-community-innovation-better-manage-multi-cluster-cloud-native-applications-scale"&gt;Red Hat recently joined the Argo community&lt;/a&gt; with the intention to collaborate and provide an integrated experience for developers implementing GitOps on OpenShift using Argo CD.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;To recap, Tekton focuses on cloud-native CI/CD and delivery pipelines, and Argo CD focuses on visibility, traceability, security, and integrating GitOps practices. Combining Argo CD with Tekton provides a solid foundation for organizations starting their journey toward build-and-deployment automation and delivering cloud-native applications in hybrid multi-cluster environments.&lt;/p&gt; &lt;p&gt;We continue to expand the CI/CD capabilities on OpenShift to address the new and complex challenges teams are facing in multi-cluster environments. We are creating and integrating tools that assist teams to get started and establish CI/CD and GitOps practices across their organizations. The next OpenShift release will include a preview of these updates.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#38;linkname=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#38;linkname=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#38;linkname=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#38;linkname=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#38;linkname=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#38;linkname=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#38;linkname=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fthe-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift%2F&amp;#038;title=The%20present%20and%20future%20of%20CI%2FCD%20with%20GitOps%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/09/03/the-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift/" data-a2a-title="The present and future of CI/CD with GitOps on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/03/the-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift/"&gt;The present and future of CI/CD with GitOps on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vPp-61Exbn4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The need to deliver applications faster is near-universal, even in organizations that traditionally are perceived as risk-averse. As the foundations of DevOps, continuous integration (CI) and continuous delivery (CD) are essential to application delivery in most organizations. Together, CI/CD tools and processes automate building and testing applications on every code or configuration change, then trigger [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/03/the-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift/"&gt;The present and future of CI/CD with GitOps on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/09/03/the-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">773487</post-id><dc:creator>Siamak Sadeghianfar</dc:creator><dc:date>2020-09-03T07:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/09/03/the-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Introduction to Tekton and Argo CD for multicluster development</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wiXcwl3wtIg/" /><category term="CI/CD" /><category term="DevOps" /><category term="Kubernetes" /><category term="Operator" /><category term="ArgoCD" /><category term="gitops" /><category term="multi cluster" /><category term="openshift" /><category term="tekton pipelines" /><author><name>Ryan Cook</name></author><id>https://developers.redhat.com/blog/?p=761917</id><updated>2020-09-03T07:00:08Z</updated><published>2020-09-03T07:00:08Z</published><content type="html">&lt;p&gt;Over the last two years, my coworkers and I have worked on developing a multicluster project for &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. We needed a way to efficiently deploy applications, oversee access and authorization, and manage application placement across clusters. This need led us to develop with &lt;a href="https://developers.redhat.com/blog/2020/08/17/openshift-joins-the-argo-cd-community-kubecon-europe-2020/"&gt;Argo CD and GitOps&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Recently, I switched to another team that also focuses on multicluster development. During my interviews, I promised to help create a catalog of our projects and develop a process to deploy them rapidly. Together, the catalog and process would allow the team to just work on things, rather than trying to figure out how to get them operational. However, I quickly hit a wall. With Argo CD, I couldn&amp;#8217;t control when and in what order cluster objects were deployed onto new or existing clusters. Eventually, I discovered &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/blog/openshift-pipelines-tech-preview-blog"&gt;Tekton&lt;/a&gt;, a powerful addition to my development toolset.&lt;/p&gt; &lt;p&gt;In this article, I briefly describe my process for developing the catalog and process tool. I&amp;#8217;ll introduce the components involved, explain a little about how &lt;a href="https://developers.redhat.com/blog/2020/04/30/creating-pipelines-with-openshift-4-4s-new-pipeline-builder-and-tekton-pipelines/"&gt;Tekton Pipelines&lt;/a&gt; works, and leave you with a tool that you can share with your organization and teams.&lt;/p&gt; &lt;p&gt;&lt;span id="more-761917"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Argo CD and Tekton&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt; watches cluster objects stored in a Git repository and manages the create, update, and delete (CRUD) processes for objects within the repository. Tekton is a &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; tool that handles all parts of the development lifecycle, from building images to deploying cluster objects.&lt;/p&gt; &lt;p&gt;Tekton runs one or more tasks, which launch the appropriate container(s) and execute a specific set of commands. A user can combine a series of tasks to form a Tekton pipeline. In a pipeline to build a container image, for example, the developer pushes the code to a repository. Tekton sees the change and launches a pipeline, which builds the code, creates a container image, and pushes it to the image registry.&lt;/p&gt; &lt;h2&gt;Developing the catalog project&lt;/h2&gt; &lt;p&gt;For the catalog project, I needed to deploy two clusters and connect them using Amazon Web Services (AWS) Virtual Private Cloud (VPC) peering. Then, I needed to deploy objects to both clusters. To start, I installed the OpenShift Operators for &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/blog/openshift-hive-cluster-as-a-service"&gt;Hive&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://demo.openshift.com/en/dev/argocd/"&gt;Argo CD&lt;/a&gt;. I stored my Hive cluster deployments within a Git repository, then had Argo CD watch the repository to deploy the clusters.&lt;/p&gt; &lt;p&gt;The issue was that I couldn&amp;#8217;t get the cluster to import into Argo CD and programmatically create the Argo CD YAML files, which I needed to deploy the Kubernetes objects from the Git repository. To overcome the issue, I used Tekton. The diagram in Figure 1 shows how I used Tekton pipelines to define precisely when each item should be applied to the newly created clusters.&lt;/p&gt; &lt;div id="attachment_774267" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e588337272.png"&gt;&lt;img aria-describedby="caption-attachment-774267" class="wp-image-774267" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e588337272.png" alt="Diagram showing the flow through the pipeline" width="639" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e588337272.png 800w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e588337272-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e588337272-768x220.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-774267" class="wp-caption-text"&gt;Figure 1: The Tekton pipeline for importing into Argo CD and programmatically creating the Argo CD YAML files.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Getting started&lt;/h3&gt; &lt;p&gt;I set up the &lt;a target="_blank" rel="nofollow" href="https://github.com/cooktheryan/tekton-argocd.git"&gt;tekton-argocd project repository&lt;/a&gt; to help guide you through this workflow. Before getting started, fork the repository. You will add clusters to the &lt;code&gt;/clusters&lt;/code&gt; directory.Â Modify the repository and create the application within Argo CD:&lt;/p&gt; &lt;pre&gt;$ cd ~/git/tekton-argocd $ sed -i â€˜s/cooktheryan/YOURUSERNAME/gâ€™ argo-app/*.yaml $ oc create -f argo-app &lt;/pre&gt; &lt;p&gt;These commands create a multitude of tasks and a pipeline within the Hive namespace, all of which are managed by Argo CD.&lt;/p&gt; &lt;h3&gt;Running a pipeline&lt;/h3&gt; &lt;p&gt;Log into the OpenShift console and select the project &lt;b&gt;hive&lt;/b&gt; and the &lt;b&gt;Pipelines&lt;/b&gt; menu from the list of available components. You will find your newly created pipelines there. After adding the clusters to your Git repository, specify the required variables as shown:&lt;/p&gt; &lt;table align="center"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;Field&lt;/th&gt; &lt;th&gt;Value&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pathToYamlFile1&lt;/td&gt; &lt;td&gt;&lt;code&gt;clusters/east1&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pathToYamlFile2&lt;/td&gt; &lt;td&gt;&lt;code&gt;clusters/east2&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;cluster1&lt;/td&gt; &lt;td&gt;&lt;code&gt;east1&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;cluster2&lt;/td&gt; &lt;td&gt;&lt;code&gt;clusters/east2&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pathToYamlFile3&lt;/td&gt; &lt;td&gt;&lt;code&gt;acm&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;git-source&lt;/td&gt; &lt;td&gt;Create Pipeline Resource&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Once the dialog box is filled out (see Figure 2), run the pipeline.&lt;/p&gt; &lt;div id="attachment_774257" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e58332fe53.png"&gt;&lt;img aria-describedby="caption-attachment-774257" class="wp-image-774257" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e58332fe53.png" alt="The OpenShift &amp;#34;Start Pipeline&amp;#34; dialog box filled out for the example." width="640" height="654" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e58332fe53.png 898w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e58332fe53-294x300.png 294w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/img_5f4e58332fe53-768x784.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-774257" class="wp-caption-text"&gt;Figure 2: Specify the required variables, and run the pipeline in the OpenShift console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You now have a repeatable process to deploy two clusters, peer them together, and deploy an application to each of the clusters. This operation is possible because Hive saves the &lt;code&gt;kubeconfig&lt;/code&gt;s for the newly created clusters as a secret. It then creates a task called &lt;code&gt;remote-cluster-apply&lt;/code&gt;, which uses the secret and issues &lt;code&gt;kubectl create -f&lt;/code&gt; commands against the Hive-created clusters.&lt;/p&gt; &lt;p&gt;Within the repository, you will notice additional Tekton pipelines. You can use these pipelines to create a single cluster and remotely apply one or more objects to the cluster. I have included pipelines within the repository cleanup to help with managing the cluster lifecycle.&lt;/p&gt; &lt;h2&gt;Using Tekton for CI and Argo for CD&lt;/h2&gt; &lt;p&gt;Think of pipelines as an extra pair of hands for ensuring that no request or workflow process is ever forgotten. Combining Argo CD and Tekton creates safer and repeatable processes, which allows everyone on the team to be successful. Watch this video to learn more about combining Argo CD and Tekton: &lt;a target="_blank" rel="nofollow" href="https://youtu.be/pVZ-3LEIHc8"&gt;GitOps Continued: Using Tekton for CI and Argo for CD&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;There is no perfect tool to accomplish everything. With this project, I found a way to pair specific tools to create a consistent and repeatable experience. Sharing Tekton tasks among your organization, distributed by Argo CD, allows teams to collaborate and increases team efficiency across the development and operational lifecycles.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#38;linkname=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#38;linkname=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#38;linkname=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#38;linkname=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#38;linkname=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#38;linkname=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#38;linkname=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F03%2Fintroduction-to-tekton-and-argo-cd-for-multicluster-development%2F&amp;#038;title=Introduction%20to%20Tekton%20and%20Argo%20CD%20for%20multicluster%20development" data-a2a-url="https://developers.redhat.com/blog/2020/09/03/introduction-to-tekton-and-argo-cd-for-multicluster-development/" data-a2a-title="Introduction to Tekton and Argo CD for multicluster development"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/03/introduction-to-tekton-and-argo-cd-for-multicluster-development/"&gt;Introduction to Tekton and Argo CD for multicluster development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wiXcwl3wtIg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Over the last two years, my coworkers and I have worked on developing a multicluster project for Kubernetes and Red Hat OpenShift. We needed a way to efficiently deploy applications, oversee access and authorization, and manage application placement across clusters. This need led us to develop with Argo CD and GitOps. Recently, I switched to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/03/introduction-to-tekton-and-argo-cd-for-multicluster-development/"&gt;Introduction to Tekton and Argo CD for multicluster development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/09/03/introduction-to-tekton-and-argo-cd-for-multicluster-development/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">761917</post-id><dc:creator>Ryan Cook</dc:creator><dc:date>2020-09-03T07:00:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/09/03/introduction-to-tekton-and-argo-cd-for-multicluster-development/</feedburner:origLink></entry><entry><title>DevOps Guide - Implementing four-eyes principle with process automation tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6A8LVSnLyrU/devops-guide-implementing-four-eyes-principle.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-devops_guide_implementing_four_eyes_principle_with_process_automation_tooling</id><updated>2020-09-04T09:10:38Z</updated><published>2020-09-03T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-dD6ipKVAs88/X0ZMNpSeewI/AAAAAAAAxcc/0CkB-OjHMFozh3o0BM32TkRzFs06MyC9gCNcBGAsYHQ/s1600/soroush-karimi-ZcczBXrkXgA-unsplash.jpg" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="devops four-eyes principle" border="0" data-original-height="900" data-original-width="1600" height="179" src="https://1.bp.blogspot.com/-dD6ipKVAs88/X0ZMNpSeewI/AAAAAAAAxcc/0CkB-OjHMFozh3o0BM32TkRzFs06MyC9gCNcBGAsYHQ/s320/soroush-karimi-ZcczBXrkXgA-unsplash.jpg" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="text-align: left;"&gt;This article co-authored with&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.linkedin.com/in/roelhodzelmans/?originalSubdomain=nl" style="text-align: left;" target="_blank"&gt;Roel Hodzelmans&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;With great power comes great responsibility.&lt;br /&gt;&lt;br /&gt;More and more organisations are moving towards a DevOps based organisational model, putting more and more responsibility into the hands of the teams delivering software. As part of that change - and the need due to the markets moving faster and faster - more and more organisations are investing into means to release more milestones into production faster. Therefore one of the main goals within these organisations is to automate, audit, secure and ensure correct repeatability of actions.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;To make that more concrete in our world of software development, we're now talking about how to implement processes that ensure our software is correct, verified, and authorized to be put into production for end customer usage. Delivering software requires that both developers and operations find common ways of merging their processes to enable faster delivery and smoother change management.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Barriers to creating a harmonious flow are found in organizations that require more stringent&amp;nbsp; verification methods on their software release mechanisms. One of the more common requirements is that of the&amp;nbsp;&lt;i&gt;four-eyes principle&lt;/i&gt;, requiring extra approval controls before release.&lt;br /&gt;&lt;br /&gt;Let's look at defining and implementing the&amp;nbsp;&lt;i&gt;four-eyes principle&lt;/i&gt;&amp;nbsp;in a DevOps automation process.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;If we look around the world we'll find the &lt;i&gt;four-eyes principle&lt;/i&gt;&amp;nbsp;as an integral part of many business domains. Before we look closer at implementing the solution for this principle, let's take a look at it's definition by the &lt;a href="https://www.unido.org/overview/member-states/change-management/faq/what-four-eyes-principle" target="_blank"&gt;United Nations Industrial Development Organization&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;What is the four-eyes principle?&lt;/h3&gt;&lt;i&gt;The four-eyes principle means that a certain activity, i.e. a decision, transaction, etc., must be approved by at least two people. This controlling mechanism is used to facilitate delegation of authority and increase transparency. The processes in UNIDO's new business model are based on the four-eyes principle, which are &lt;b&gt;facilitated by electronic approvals&lt;/b&gt; and &lt;b&gt;workflows in the ERP system&lt;/b&gt;. This approach not only ensures the efficiency of processes by enabling fast decision-making while ensuring effective control and monitoring, but also brings about cultural change. Staff members are able to perform these processes irrespective whether they are at Headquarters or in the field.&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt; There are two really interesting (highlighted in bold text) fragments in this definition that we'll be applying in our implementation example:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;"...facilitated by electronic approvals..."&lt;/li&gt;&lt;li&gt;"...workflows in the ERP system."&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Both of these aspects, automated approval using a rule based system and process automation workflows, can be applied to our software DevOps delivery model.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/1" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;" target="_blank"&gt;&lt;img border="1" data-original-height="752" data-original-width="1266" height="190" src="https://1.bp.blogspot.com/-vndqKsVKgLI/X0ZqSWSmGWI/AAAAAAAAxc0/eh533ijcVUMaqby7H2Th-iUE86TV9S3FwCNcBGAsYHQ/s320/Screenshot%2B2020-08-26%2Bat%2B15.57.09.png" width="320" /&gt;&lt;/a&gt;Implementing the principle&lt;/h3&gt;&lt;div&gt;Our &lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" target="_blank"&gt;example DevOps implementation&lt;/a&gt; will focus on the software delivery model of a continuous integration and continuous delivery (CI/CD) mechanism. It's not important how that is exactly implemented as many organizations have many different components in use to achieve the same results, an automated delivery of software into production.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To meet the principle, we'll be looking at adding in some automated checks using a rule engine to ensure automated approval of software updates in a portion of our CI/CD pipeline. The second set of eyes are added with process automation tooling using user task tools.&lt;br /&gt;&lt;br /&gt;This entire example is &lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" target="_blank"&gt;available for you online in a workshop&lt;/a&gt; where you can get hands-on at your own pace with freely available tooling. From installation of the tooling to developing all the components of your process, it's a step-by-step experience where you'll see how the &lt;i&gt;four-eyes&amp;nbsp; principle&lt;/i&gt;&amp;nbsp;can work for your DevOps processes when needed.&lt;br /&gt;&lt;br /&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-HCQrNi0F9SQ/X0Zn9ew3AGI/AAAAAAAAxco/UyW-52IG224MEQ5F08a814xXC1jc98UhgCNcBGAsYHQ/s1600/devops-testing-process.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="devops four-eyes principle" border="1" data-original-height="623" data-original-width="1390" height="143" src="https://1.bp.blogspot.com/-HCQrNi0F9SQ/X0Zn9ew3AGI/AAAAAAAAxco/UyW-52IG224MEQ5F08a814xXC1jc98UhgCNcBGAsYHQ/s320/devops-testing-process.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Figure 1: Process implementation from workshop.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;So what's this automated process doing?&lt;br /&gt;&lt;br /&gt;As shown in figure 1, a code job is submitted by a developer, the automated rules are applied to determine if a code review is needed by peers (+50 lines of code submitted). A review is possible and done by a senior group if needed. Diverse logging documents process flow as the job moves through the process before heading back for deployment. Ideal jobs pass all rules and tests for automated deployment.&lt;br /&gt;&lt;br /&gt;Take a look at the workshop and implement the example on your own machine. Before you know it, you'll be the &lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" target="_blank"&gt;DevOps Hero&lt;/a&gt; in your corner of the world.&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=amF_KIRtjt0:N8-ZvThW5-U:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=amF_KIRtjt0:N8-ZvThW5-U:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=amF_KIRtjt0:N8-ZvThW5-U:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=amF_KIRtjt0:N8-ZvThW5-U:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=amF_KIRtjt0:N8-ZvThW5-U:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=amF_KIRtjt0:N8-ZvThW5-U:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=amF_KIRtjt0:N8-ZvThW5-U:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=amF_KIRtjt0:N8-ZvThW5-U:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=amF_KIRtjt0:N8-ZvThW5-U:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=amF_KIRtjt0:N8-ZvThW5-U:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=amF_KIRtjt0:N8-ZvThW5-U:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/amF_KIRtjt0" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6A8LVSnLyrU" height="1" width="1" alt=""/&gt;</content><summary>This article co-authored withÂ Roel HodzelmansWith great power comes great responsibility. More and more organisations are moving towards a DevOps based organisational model, putting more and more responsibility into the hands of the teams delivering software. As part of that change - and the need due to the markets moving faster and faster - more and more organisations are investing into means to ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-09-03T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/amF_KIRtjt0/devops-guide-implementing-four-eyes-principle.html</feedburner:origLink></entry><entry><title>Add Java language support for Apache Camel K inside Eclipse Che</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/koG7EL_2ekU/" /><category term="Developer Tools" /><category term="Java" /><category term="Kubernetes" /><category term="VS Code" /><category term="apache camel" /><category term="Camel K" /><category term="CodeReady Workspaces" /><category term="Eclipse Che" /><category term="openshift" /><author><name>AurÃ©lien Pupier</name></author><id>https://developers.redhat.com/blog/?p=739157</id><updated>2020-09-02T07:00:40Z</updated><published>2020-09-02T07:00:40Z</published><content type="html">&lt;p&gt;&lt;a href="https://camel.apache.org/projects/camel-k/" target="_blank" rel="nofollow noopener noreferrer"&gt;Apache Camel K&lt;/a&gt; should be as lightweight as possible. Therefore, the Camel K project provides standalone Java files that describe a Camel integration. The downside to this practice is that existing IDEs cannot provide complete support out of the box. A few months ago, I mentioned the &lt;a href="https://developers.redhat.com/blog/2020/02/03/camel-k-standalone-java-file-now-with-java-language-support"&gt;Java language support for Apache Camel K&lt;/a&gt; that was discussed in &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2019/09/30/sending-a-telegram-with-apache-camel-k-and-visual-studio-code"&gt;Red Hat Visual Studio Code (VS Code) extension&lt;/a&gt;,&lt;/em&gt; and how it provides &lt;a href="https://developers.redhat.com/blog/2020/02/03/camel-k-standalone-java-file-now-with-java-language-support"&gt;Java language support for Apache Camel K&lt;/a&gt;. In this article and demo, I show you how to do the same with &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://che.openshift.io"&gt;che.openshift.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-739157"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Demo: Using the Java language plug-in&lt;/h2&gt; &lt;p&gt;I&amp;#8217;ve &lt;a target="_blank" rel="nofollow" href="https://github.com/apupier/camelk-on-che-with-java-support-example"&gt;written an example application&lt;/a&gt; to demonstrate how to use this plug-in to add &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; language support to Apache Camel K within Eclipse Che. If you have an account on &lt;a target="_blank" rel="nofollow" href="https://che.openshift.io/dashboard/"&gt;che.openshift.io&lt;/a&gt;, that interface offers a button you can click to open the example in a ready-to-use Che workspace. The included video shows how easy it is to start a workspace with a pre-configured devfile.&lt;/p&gt; &lt;p&gt;Fortunately, the Java language support extension is compatible with other &lt;a href="https://developers.redhat.com/blog/2020/01/24/apache-camel-k-development-inside-eclipse-che-iteration-1/"&gt;Camel K on Che&lt;/a&gt; features. (Click the link for a detailed introduction to Apache Camel K development inside of Eclipse Che.)&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/s54uEFYmSGw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Configuring Java support for your Apache Camel K projects&lt;/h2&gt; &lt;p&gt;The key point is to reference the specific plug-in configuration that you need. In your devfile, you need to add a reference to the &lt;code&gt;chePlugin&lt;/code&gt; for Camel K:&lt;/p&gt; &lt;pre&gt;- type: chePlugin reference: &amp;#62;- https://raw.githubusercontent.com/apupier/camelk-on-che-with-java-support-example/master/.che/camelk-plugin-meta.yaml alias: vscode-camelk &lt;/pre&gt; &lt;p&gt;Apart from that, the Che devfile configuration is typical. See the &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/docs/che-7/using-a-visual-studio-code-extension-in-che/"&gt;Eclipse Che documentation&lt;/a&gt; for a discussion of various ways to take advantage of the Che devfile configuration possibilities.&lt;/p&gt; &lt;h2&gt;Technical insights&lt;/h2&gt; &lt;p&gt;The provided plug-in configuration groups together the VS Code extensions for &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;, Camel K, and Java. We used a custom dockerfile as a sidecar to gather requirements for all of the extensions used in the Che plug-in definition.&lt;/p&gt; &lt;p&gt;These extensions are grouped because all of them rely on passing files through the filesystem (VS Code Global Storage), sharing &lt;code&gt;kubeconfig&lt;/code&gt;, and reusing command-line tooling (&lt;code&gt;kubectl, mvn&lt;/code&gt;). In the future, we expect that we won&amp;#8217;t need a specific plug-in definition; we also expect to have a predefined stack configured.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We are working on including Java language support directly in the Apache Camel K stack. To help promote this initiative, please follow, vote, and help us with &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/che/issues/16018"&gt;this issue&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#038;title=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" data-a2a-url="https://developers.redhat.com/blog/2020/09/02/add-java-language-support-for-apache-camel-k-inside-eclipse-che/" data-a2a-title="Add Java language support for Apache Camel K inside Eclipse Che"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/02/add-java-language-support-for-apache-camel-k-inside-eclipse-che/"&gt;Add Java language support for Apache Camel K inside Eclipse Che&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/koG7EL_2ekU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Apache Camel K should be as lightweight as possible. Therefore, the Camel K project provides standalone Java files that describe a Camel integration. The downside to this practice is that existing IDEs cannot provide complete support out of the box. A few months ago, I mentioned the Java language support for Apache Camel K that [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/02/add-java-language-support-for-apache-camel-k-inside-eclipse-che/"&gt;Add Java language support for Apache Camel K inside Eclipse Che&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">739157</post-id><dc:creator>AurÃ©lien Pupier</dc:creator><dc:date>2020-09-02T07:00:40Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/09/02/add-java-language-support-for-apache-camel-k-inside-eclipse-che/</feedburner:origLink></entry><entry><title>Using Spring Cloud Functions with OpenShift Serverless</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/APx7--iqTxU/" /><category term="Java" /><category term="Linux" /><category term="Serverless" /><category term="Spring Boot" /><category term="google translate wrapper" /><category term="Gradle" /><category term="java container" /><category term="openshift" /><category term="Spring Cloud" /><author><name>William Markito Oliveira</name></author><id>https://developers.redhat.com/blog/?p=746067</id><updated>2020-09-01T07:00:35Z</updated><published>2020-09-01T07:00:35Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://spring.io/projects/spring-cloud-function"&gt;Spring Cloud Functions&lt;/a&gt; are yet another interesting option for &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java developers&lt;/a&gt; when building &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless applications&lt;/a&gt;. You have already seen how to &lt;a href="https://developers.redhat.com/blog/2020/01/02/kubernetes-native-spring-apps-on-quarkus/"&gt;build and run applications for Red Hat OpenShift Serverless&lt;/a&gt; using &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, but in this article, we talk about how to use Spring Cloud Functions and walk you through those steps. These steps are similar to running any other &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt; application with &lt;a target="_blank" rel="nofollow" href="https://openshift.com/serverless"&gt;OpenShift Serverless.&lt;/a&gt; One of the benefits of building an open hybrid serverless platform is giving developers a choice of &lt;a href="https://developers.redhat.com/blog/category/languages-compilers/"&gt;programming languages&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/developer-tools"&gt;tools&lt;/a&gt;, frameworks, and portability across any environment to run serverless applications. Beyond that, you want to ensure that the developer experience and overall workflow is intuitive and practical, which is what you will learn here.&lt;/p&gt; &lt;p&gt;If you are interested in just watching the steps performed in this article you can watch the recording on YouTube.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/yXlTs0On3Ys?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Requirements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.gradle.org/current/userguide/installation.html"&gt;Gradle&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Java Development Tool Kit (JDK 8+)&lt;/li&gt; &lt;li&gt;OpenShift 4.3+&lt;/li&gt; &lt;li&gt;&lt;a href="https://openshift.com/serverless" rel="nofollow"&gt;OpenShift Serverless&lt;/a&gt;Â 1.7+&lt;/li&gt; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/serverless/installing_serverless/installing-kn.html"&gt;&lt;code&gt;kn&lt;/code&gt;&lt;/a&gt;Â (Knative Client)&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Generate the Spring Cloud Functions project&lt;/h2&gt; &lt;p&gt;One of the easiest ways to generate a Spring project is usingÂ &lt;code&gt;curl&lt;/code&gt;Â to accessÂ &lt;code&gt;start.spring.io&lt;/code&gt; and that&amp;#8217;s exactly how we will start our project:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/ab6184e4f18bca33f89df78721731411"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This will generate and download a project inside theÂ &lt;code&gt;my-function-project&lt;/code&gt;Â folder.&lt;/p&gt; &lt;h2&gt;&lt;a id="user-content-implement-your-function" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#implement-your-function" aria-hidden="true"&gt;&lt;/a&gt;Implement your first function&lt;/h2&gt; &lt;p&gt;We will implement a quick and dirty Google Translator wrapper. In order to create functions using Spring Cloud Functions, you need a method with the &lt;code&gt;@Bean&lt;/code&gt;Â annotation that can follow any of the functional interfaces fromÂ &lt;code&gt;java.util.function&lt;/code&gt;Â such asÂ &lt;code&gt;Consumer&lt;/code&gt;,Â &lt;code&gt;Supplier&lt;/code&gt;, or &lt;code&gt;Function&lt;/code&gt;. For more details about how Spring Cloud Functions work please read the &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-cloud-function/docs/3.0.8.RELEASE/reference/html/spring-cloud-function.html"&gt;documentation&lt;/a&gt;, but for this example just copy and paste the following method to your &lt;em&gt;DemoApplication.java&lt;/em&gt; file:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/e976443fd61a6d7d2278f2acfa7c18d3"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Test your function locally&lt;/h3&gt; &lt;p&gt;Since Spring Cloud Functions are just Spring Boot apps, you can implement unit tests just like any other Java application using JUnit, Mockito, or whatever you would like.Â  You can also run the application locally, using &lt;code&gt;gradle bootRun&lt;/code&gt;Â orÂ &lt;code&gt;mvn spring-boot:run&lt;/code&gt;, which is useful for validating the application iteratively before running &lt;a href="https://developers.redhat.com/topics/containers"&gt;inside a container&lt;/a&gt;.Â  Make sure you have fixed all Java imports and then start the application locally using:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/cf771a9941e7b8e3e187aaaa1eee55e7"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Every function will be mapped to an endpoint that can be accessed as follows:&lt;/p&gt; &lt;pre&gt;http://localhost:8080/&amp;#60;functionName&amp;#62; &lt;/pre&gt; &lt;p&gt;Concretely, for our translate function, you can access the endpoint using the following:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/5340d90f3288507d7c522733e0dd6338"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;UsingÂ &lt;code&gt;curl&lt;/code&gt; we post a word or a phrase and it gets translated to Spanish. You can parse the output and format it properly, but to keep this short I&amp;#8217;ll leave that as an exercise for the reader.Â  May &lt;a target="_blank" rel="nofollow" href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt;Â andÂ &lt;a href="https://www.json.org/json-en.html" rel="nofollow"&gt;JSON&lt;/a&gt;Â be your friends.&lt;/p&gt; &lt;h2&gt;Building a container using Jib&lt;/h2&gt; &lt;p&gt;So far we have built a Spring application and executed it locally but it&amp;#8217;s time to containerize the application. There are many ways to execute this step but I&amp;#8217;ve decided to stick to well-known tools used by the Java community, so I&amp;#8217;ll use &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/GoogleContainerTools/jib"&gt;Jib&lt;/a&gt;&lt;/code&gt;Â and add it as a plugin to my Gradle project.&lt;/p&gt; &lt;p&gt;Edit theÂ &lt;code&gt;build.gradle&lt;/code&gt;Â file and append this lineÂ &lt;code&gt;id 'com.google.cloud.tools.jib' version "2.4.0"&lt;/code&gt; to your plugins section. It should look like this:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/f6ee63153a25351d7fcccbb37885598b"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;With Jib as part of your project, Gradle can build your container and push it to your container registry of choice. &lt;a target="_blank" rel="nofollow" href="http://quay.io"&gt;Quay&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt; are well-known choices.&lt;/p&gt; &lt;p&gt;After you have the jib plugin on your Gradle project, build a container for the project using the following command: &lt;code&gt;gradle build jib --image=&amp;#60;your_container_registry&amp;#62;/demo-app:v1&lt;/code&gt;&lt;/p&gt; &lt;p&gt;On my machine this is what it looks like:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/9bf7aca34c8c1aabdd17bce7f8abde50"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This generated a container for your project and automatically pushed it to the container registry.Â  If you are new to &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; containers and container registries please read &lt;a href="https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/"&gt;this post&lt;/a&gt; to get a practical introduction to the topic.&lt;/p&gt; &lt;h2&gt;Deploy to OpenShift Serverless&lt;/h2&gt; &lt;p&gt;With the container built you can now deploy the application using the Knative CLI, &lt;code&gt;kn&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/7f40db940f0edd2bd8e3898d71543f0a"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;OpenShift Serverless will do the heavy lifting of creating a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; deployment, a route, SSL configuration (using your cluster&amp;#8217;s configuration), and auto-scaling configuration based on the number of requests. For more details about OpenShift Serverless, please check out theÂ &lt;a href="https://docs.openshift.com/container-platform/4.4/serverless/serverless-getting-started.html" rel="nofollow"&gt;product documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The above code will auto-scale the application down (to zero) after six seconds without a new request.&lt;/p&gt; &lt;p&gt;Try it again using the URL from the service running in OpenShift:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/b1673b96043b3670c24f9a23a3666925"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Adding a new function that can handle a JSON document&lt;/h2&gt; &lt;p&gt;When creating REST APIs it is very common to send and receive JSON documents and you can very easily add a function that takes a JSON message instead of a String.&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-the-data-model" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#the-data-model" aria-hidden="true"&gt;&lt;/a&gt;The data model&lt;/h3&gt; &lt;p&gt;Create a newÂ &lt;code&gt;UserReview.java&lt;/code&gt;Â file with the following content:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/df869ca8245f59ffde0175b0f679c476"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We will use this class to marshal and unmarshal the JSON objects being sent or received by our API. Create aÂ &lt;code&gt;review.json&lt;/code&gt; file with the content below. This will be the input of our new &lt;code&gt;translateReview&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/31a7e912be19d7babf9b1aa719632b94"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;div class="highlight highlight-source-json"&gt; &lt;h3&gt;The function code&lt;/h3&gt; &lt;p&gt;This will be very similar to the previous function we created, it&amp;#8217;s just another method with theÂ &lt;code&gt;@Bean&lt;/code&gt; annotation and using our POJO class as input and output.&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/6cf0c421f3936ffb741ca61948666a98"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-posting-a-json-file" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#posting-a-json-file" aria-hidden="true"&gt;&lt;/a&gt;Posting a JSON file&lt;/h3&gt; &lt;p&gt;We will continue usingÂ &lt;code&gt;curl&lt;/code&gt;Â as our client here and specify a path to theÂ &lt;code&gt;review.json&lt;/code&gt; file created in the previous step.Â  Start the application again using &lt;code&gt;gradle bootRun&lt;/code&gt;then post a json file to the API:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/f35a880180b46258b5050db381b20c6f"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As you can see, the function now accepts a JSON document and translates the user comment to Spanish.Â  You can experiment with a &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-cloud-function/docs/3.0.8.RELEASE/reference/html/spring-cloud-function.html#_function_composition"&gt;declarative function composition&lt;/a&gt; way to implement this if that&amp;#8217;s your cup of tea, but I&amp;#8217;m keeping this simple for now.&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-building-your-new-container" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#building-your-new-container" aria-hidden="true"&gt;&lt;/a&gt;Building your new container&lt;/h3&gt; &lt;p&gt;Same steps as before but using a &lt;code&gt;v2&lt;/code&gt; tag, build a new version of the container:&lt;/p&gt; &lt;pre&gt;$ gradle jib --image=&amp;#60;your_container_registry&amp;#62;/demo-app:v2&lt;/pre&gt; &lt;h3&gt;&lt;a id="user-content-updating-the-deployed-application-to-include-the-new-function" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#updating-the-deployed-application-to-include-the-new-function" aria-hidden="true"&gt;&lt;/a&gt;Updating the deployed application to include the new function&lt;/h3&gt; &lt;p&gt;Now we are going to use another interesting feature of OpenShift Serverless, we will deploy a new version of the application but with a different URL, that way current clients of this API won&amp;#8217;t even know about this new functionality until we decide to send traffic to it:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/5e71653d3bda5f13b36151526a392cdc"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This can be achieved by using tags. In this example, I&amp;#8217;m tagging a particular revision &lt;code&gt;@latest&lt;/code&gt;Â with aÂ &lt;code&gt;preview&lt;/code&gt;Â value that will be appended to the service URL. Also note, that I&amp;#8217;m setting 100% of traffic to the previous revisionÂ &lt;code&gt;translator-v1&lt;/code&gt;, which means no traffic will be sent to the new version being deployed. This is also called a &amp;#8220;dark launch,&amp;#8221; where a new version of my application is available in a production environment but not necessarily receiving any requests unless someone knows which URL to use.&lt;/p&gt; &lt;p&gt;After validation is complete you can decide to gradually send traffic using &lt;a target="_blank" rel="nofollow" href="https://opensource.com/article/17/5/colorful-deployments"&gt;canary or blue/green deployment&lt;/a&gt; models. There is a step-by-step lab about how to implement those models on &lt;a href="https://learn.openshift.com/developing-on-openshift/serverless/" rel="nofollow"&gt;https://learn.openshift.com/developing-on-openshift/serverless/&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-testing" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#testing" aria-hidden="true"&gt;&lt;/a&gt;Testing&lt;/h3&gt; &lt;p&gt;Now you can execute the same curl command as before but this time adding theÂ &lt;code&gt;preview&lt;/code&gt; prefix:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/efec228f47b7515d03d5475d8deb6851"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a id="user-content-conclusion" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#conclusion" aria-hidden="true"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You can easily build and deploy a Spring Cloud Functions application using OpenShift Serverless. The workflow feels natural for a Java developer and you can even build the container using a Gradle (or Maven) plugin such as Jib.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-774447 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Spring-Cloud-Function-OpenShift-Serverless-1024x631.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Spring-Cloud-Function-OpenShift-Serverless-1024x631.png" alt="A Spring Cloud Function in Red Hat OpenShift" width="640" height="394" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Spring-Cloud-Function-OpenShift-Serverless-1024x631.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/Spring-Cloud-Function-OpenShift-Serverless-300x185.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/Spring-Cloud-Function-OpenShift-Serverless-768x473.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Using OpenShift Serverless you can also deploy multiple versions of the application and perform a dark launch, blue/green, or canary deployment with no sweat.Â  The OpenShift developer console makes it even easier to visualize traffic route information and the overall topology of your application.&lt;/p&gt; &lt;p&gt;For more details, &lt;a target="_blank" rel="nofollow" href="https://openshift.com/serverless"&gt;check the OpenShift Serverless page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#038;title=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" data-a2a-url="https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/" data-a2a-title="Using Spring Cloud Functions with OpenShift Serverless"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/"&gt;Using Spring Cloud Functions with OpenShift Serverless&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/APx7--iqTxU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Spring Cloud Functions are yet another interesting option for Java developers when building serverless applications. You have already seen how to build and run applications for Red Hat OpenShift Serverless using Quarkus, but in this article, we talk about how to use Spring Cloud Functions and walk you through those steps. These steps are similar [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/"&gt;Using Spring Cloud Functions with OpenShift Serverless&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">746067</post-id><dc:creator>William Markito Oliveira</dc:creator><dc:date>2020-09-01T07:00:35Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/</feedburner:origLink></entry><entry><title>Non Blocking Saga</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/dAhRmEXXM10/" /><category term="embedded" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="non-blocking" scheme="searchisko:content:tags" /><category term="server" scheme="searchisko:content:tags" /><author><name>William Burns</name></author><id>searchisko:content:id:jbossorg_blog-non_blocking_saga</id><updated>2020-08-31T12:00:00Z</updated><published>2020-08-31T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As many you are probably aware recent trends have shown that making applications non blocking provides quite a few benefits allowing for greater scalability with less resources. Infinispan has been written and rewriting parts to take advantage of this as we can for both embedded and server use cases.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_before_infinispan_11"&gt;&lt;a class="anchor" href="#_before_infinispan_11" /&gt;Before Infinispan 11&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Infinispan Server has always utilized netty, however we may not have been the best about ensuring we didnâ€™t block the event loop. The HotRod Client in 9.2.0 also utilizes netty to provide for non blocking operations. The internal embedded interceptors were rewritten in 9.0.0 to provide for non blocking support for internal cache operations, which include put/get. Cache store operations in 10.0.0 were offloaded to a blocking thread pool to provide non blocking support.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_infinispan_11_non_blocking_changes"&gt;&lt;a class="anchor" href="#_infinispan_11_non_blocking_changes" /&gt;Infinispan 11 Non Blocking Changes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With the newest release we have rewritten lots of the internals of Infinispan to take advantage of non blocking as much as possible. The amount of changes is quite large and a bit hard to describe them all in this blog post. The various JIRA can be seen from &lt;a href="https://issues.redhat.com/browse/ISPN-10309" class="bare"&gt;https://issues.redhat.com/browse/ISPN-10309&lt;/a&gt;, which isnâ€™t even complete yet despite how many different changes we have done.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The persistence SPI was completely rewritten in 11 with non blocking in mind as well and this will be covered in a future post as it has much more detailing it. For now you can rest assure that all prior stores will still work, however they may have or can be optimized to take into account non blocking support.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_conversions"&gt;&lt;a class="anchor" href="#_conversions" /&gt;Conversions&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Pretty much every module in the Infinispan code base has been changed to support non blocking. If code relies upon an API that is blocking that is known to be blocking, we offload those calls to a blocking thread pool to ensure we never block the non blocking thread.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Unfortunately some modules have not yet been updated and those are ones related to query. Query is in the middle of a giant refactoring and doing so would have caused massive conflicts and thus has been delayed to Infinispan 12. The server works around this by ensuring write operations performed upon a cache with query are always done in a blocking thread to ensure safety.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_thread_pools"&gt;&lt;a class="anchor" href="#_thread_pools" /&gt;Thread Pools&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan utilizes various thread pools for handling of operations. This table details how many thread pools each version of Infinispan can have.&lt;/p&gt; &lt;/div&gt; &lt;table class="tableblock frame-all grid-all stretch"&gt; &lt;caption class="title"&gt;Table 1. Thread Pools&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3334%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Version&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Embedded&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Server&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 10&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;5&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;7&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 11&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;3&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As you can see there is more than a 50 percent reduction of the number of thread pools in both embedded and server modes. This in turn has allowed for a reduction of the default number of threads as well as seen in the next table. Note that N is how many cores that are available to the JVM.&lt;/p&gt; &lt;/div&gt; &lt;table class="tableblock frame-all grid-all stretch"&gt; &lt;caption class="title"&gt;Table 2. Maximum Default Thread Count&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3334%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Version&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Embedded&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Server&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 10&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;310 + N&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;470 + (2 * N)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 11&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;150 + (2 * N)&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;150 + (4 * N)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;div class="paragraph"&gt; &lt;p&gt;After this consolidation we have non blocking and blocking thread pools. As you can see this allows us to reduce the maximum number of threads in embedded by about half and the server to a third of what it used to be before.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The server has an additional thread pool for the netty event loop and unfortunately we cannot consolidate this thread pool, but it is planned for Infinispan 12, which will get us to the same number of threads and thread pools for both embedded and server modes.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that this doesnâ€™t talk about the JGroups thread pool as this is unchanged and is the same.&lt;/p&gt; &lt;/div&gt; &lt;/col&gt; &lt;div class="sect2"&gt; &lt;h3 id="_blockhound"&gt;&lt;a class="anchor" href="#_blockhound" /&gt;BlockHound&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you are familiar with making code non blocking it can be a very difficult task as even the most mundane call can be hiding something blocking, even if it is very brief. We could write something to do detect such calls, but there is already an open source tool that does exactly what we needed. This tool is BlockHound, which can detect blocking calls at runtime. More information about it can be found at &lt;a href="https://github.com/reactor/BlockHound" class="bare"&gt;https://github.com/reactor/BlockHound&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan takes advantage of blockhound in that we configure it at the module level. This allows the end user to even add block hound with Infinispan in embedded mode and it should work to test out to ensure that interactions with Infinispan are not blocking when needed. Note that we do not yet support block hound for the client, despite many methods are not blocking today.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/colgroup&gt; &lt;/table&gt; &lt;div class="sect1"&gt; &lt;h2 id="_what_remains_for_infinispan_12"&gt;&lt;a class="anchor" href="#_what_remains_for_infinispan_12" /&gt;What remains for Infinispan 12&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan 12 should bring the entire non blocking saga to its hopfully final completion.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;h1 id="_the_aforementioned_query_modules_need_to_be_revamped" class="sect0"&gt;&lt;a class="anchor" href="#_the_aforementioned_query_modules_need_to_be_revamped" /&gt;The aforementioned query modules need to be revamped&lt;/h1&gt; &lt;h1 id="_existing_supported_cache_stores_need_to_be_rewritten_to_directly_support_non_blocking" class="sect0"&gt;&lt;a class="anchor" href="#_existing_supported_cache_stores_need_to_be_rewritten_to_directly_support_non_blocking" /&gt;Existing supported cache stores need to be rewritten to directly support non blocking&lt;/h1&gt; &lt;h1 id="_cache_retrieval_needs_to_be_offloaded_to_a_blocking_thread" class="sect0"&gt;&lt;a class="anchor" href="#_cache_retrieval_needs_to_be_offloaded_to_a_blocking_thread" /&gt;Cache retrieval needs to be offloaded to a blocking thread&lt;/h1&gt; &lt;h1 id="_combine_server_event_loop_with_non_blocking_thread_pool" class="sect0"&gt;&lt;a class="anchor" href="#_combine_server_event_loop_with_non_blocking_thread_pool" /&gt;Combine server event loop with non blocking thread pool&lt;/h1&gt; &lt;div class="openblock partintro"&gt; &lt;div class="content"&gt; Also if time permits the Infinispan Client would be ensured to be fully non blocking and integrate with BlockHound to ensure client apps behave properly. &lt;/div&gt; &lt;/div&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/dAhRmEXXM10" height="1" width="1" alt=""/&gt;</content><summary>As many you are probably aware recent trends have shown that making applications non blocking provides quite a few benefits allowing for greater scalability with less resources. Infinispan has been written and rewriting parts to take advantage of this as we can for both embedded and server use cases. Before Infinispan 11 The Infinispan Server has always utilized netty, however we may not have been...</summary><dc:creator>William Burns</dc:creator><dc:date>2020-08-31T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/08/31/nonblocking_nearing/</feedburner:origLink></entry><entry><title>Introducing IDE support for Apache Camel K Modeline</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gZdFGCGxzOQ/" /><category term="Apache Camel" /><category term="Java" /><category term="Kubernetes" /><category term="Microservices" /><category term="Serverless" /><category term="Camel K" /><category term="Eclipse Che" /><category term="Eclipse IDE" /><category term="integration patterns" /><category term="openshift" /><author><name>AurÃ©lien Pupier</name></author><id>https://developers.redhat.com/blog/?p=747567</id><updated>2020-08-31T07:00:38Z</updated><published>2020-08-31T07:00:38Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/"&gt;Apache Camel K&lt;/a&gt; is a lightweight integration framework built on &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; that runs natively on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. Camel K is designed explicitly for &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; architectures and allows you to run an integration written in &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/manual/latest/dsl.html"&gt;Camel DSL&lt;/a&gt; on your cloud.&lt;/p&gt; &lt;p&gt;Since &lt;a href="https://camel.apache.org/blog/2020/06/camel-k-release-1.0.0/"&gt;Apache Camel K 1.0.0&lt;/a&gt;, it has been possible to specify the configuration options for starting an integration route using &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/cli/modeline.html"&gt;Apache Camel K Modeline&lt;/a&gt;. Just place a single comment line, &lt;code&gt;// camel-k:&lt;/code&gt;, at the top of your config file. Using this method allows you to specify a relatively complex integration project in a single file.&lt;/p&gt; &lt;p&gt;Until now, you could only access these configuration options through the command line. In this article, I introduce the new IDE support for Apache Camel K&amp;#8217;s Modeline configuration.&lt;/p&gt; &lt;h2&gt;IDE support for Camel K Modeline&lt;/h2&gt; &lt;p&gt;Thanks to the &lt;a target="_blank" rel="nofollow" href="https://github.com/camel-tooling/camel-language-server/"&gt;Apache Camel Language Server&lt;/a&gt;, you can now use an extension to add Camel K Modeline support to &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; (VS Code), &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/ide/"&gt;Eclipse desktop IDEs&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/cli/modeline.html"&gt;most useful Modeline options&lt;/a&gt; are available as completions. As shown in Figure 1, you can use the &lt;i&gt;hover&lt;/i&gt; feature to view the completions and documentation for these features in VS Code.&lt;/p&gt; &lt;div id="attachment_747757" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45.png"&gt;&lt;img aria-describedby="caption-attachment-747757" class="wp-image-747757" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45.png" alt="A screenshot of the completion for a Modeline option name." width="640" height="359" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45.png 1005w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45-768x431.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747757" class="wp-caption-text"&gt;Figure 1: Use the hover feature to view Modeline completions in your IDE.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s take a look at the completions and definitions for three key options available with the Modeline configuration: trait, dependency, and property.&lt;/p&gt; &lt;h3&gt;Trait&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;trait&lt;/em&gt; option proposes a completion for trait definition names and trait property names. Hovering over a trait name or property name displays its documentation. Figure 2 shows all of the trait completion options and a definition for one of them.&lt;/p&gt; &lt;div id="attachment_747747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17.png"&gt;&lt;img aria-describedby="caption-attachment-747747" class="wp-image-747747" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17.png" alt="The completion options for a trait." width="640" height="359" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17.png 1005w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17-768x431.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747747" class="wp-caption-text"&gt;Figure 2: Trait completion options and a definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 3 shows the completion options and a definition for a trait property.&lt;/p&gt; &lt;div id="attachment_747737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35.png"&gt;&lt;img aria-describedby="caption-attachment-747737" class="wp-image-747737" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35.png" alt="The completions for a trait property name." width="640" height="266" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35.png 990w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35-300x125.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35-768x320.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747737" class="wp-caption-text"&gt;Figure 3: Trait property completion options.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Dependency&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;dependency&lt;/em&gt; option suggests Camel artifact IDs and a template for other Maven-specified dependencies, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_747727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52.png"&gt;&lt;img aria-describedby="caption-attachment-747727" class="wp-image-747727" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52.png" alt="Dependency completions." width="640" height="266" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52.png 990w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52-300x125.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52-768x320.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747727" class="wp-caption-text"&gt;Figure 4: The completion options for Camel and Maven dependencies.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Property&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;property&lt;/em&gt; option offers completions for Camel components and properties. You can use the hover feature to view the documentation for any selected element. Figure 5 shows the completion options for Camel components.&lt;/p&gt; &lt;div id="attachment_747707" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55.png"&gt;&lt;img aria-describedby="caption-attachment-747707" class="wp-image-747707 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-1024x396.png" alt="Completions for Camel components." width="640" height="248" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-1024x396.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-300x116.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-768x297.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55.png 1129w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747707" class="wp-caption-text"&gt;Figure 5: Hover over a component to view its definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Even an integration that requires specific configurations can be contained in one file.&lt;/p&gt; &lt;p&gt;Figure 6 shows the completion options for a Camel property.&lt;/p&gt; &lt;div id="attachment_747697" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05.png"&gt;&lt;img aria-describedby="caption-attachment-747697" class="wp-image-747697 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-1024x396.png" alt="Completions for a Camel component property." width="640" height="248" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-1024x396.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-300x116.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-768x297.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05.png 1129w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747697" class="wp-caption-text"&gt;Figure 6: Hover over a property to view its definition.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Overriding configuration options during development&lt;/h2&gt; &lt;p&gt;Modeline&amp;#8217;s configuration includes the production configuration, which is a useful feature. During development, you can use additional or different parameters. You can manually launch the integration from the command line with the additional parameters. Doing this avoids modifying the source code.&lt;/p&gt; &lt;p&gt;If you want to launch the same configuration multiple times or share a specific configuration in development with colleagues, you can use VS Code tasks for this purpose. To do this, create a file in your project named &lt;code&gt;tasks.json&lt;/code&gt;Â and place it in a &lt;code&gt;vscode&lt;/code&gt; folder. You should then be able to use completions to access VS Code tasks that are specific to Camel K.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;{ "version": "2.0.0", "tasks": [ { "label": "Start in dev mode Camel K integration opened in active editor", "type": "camel-k", "dev": true, "file": "${file}", "problemMatcher": [] } ] } &lt;/pre&gt; &lt;p&gt;If you enter the Camel K options that you need, completions provide the available options. When you call the &amp;#8220;Start Apache Camel K integration&amp;#8221; command, you can set the &amp;#8220;use predefined task&amp;#8221; option to launch your task with the configuration that you require.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#038;title=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" data-a2a-url="https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/" data-a2a-title="Introducing IDE support for Apache Camel K Modeline"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/"&gt;Introducing IDE support for Apache Camel K Modeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gZdFGCGxzOQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Apache Camel K is a lightweight integration framework built on Apache Camel that runs natively on Kubernetes. Camel K is designed explicitly for serverless and microservices architectures and allows you to run an integration written in Camel DSL on your cloud. Since Apache Camel K 1.0.0, it has been possible to specify the configuration options [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/"&gt;Introducing IDE support for Apache Camel K Modeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">747567</post-id><dc:creator>AurÃ©lien Pupier</dc:creator><dc:date>2020-08-31T07:00:38Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/</feedburner:origLink></entry></feed>
